; Implements the TI HDQ protocol used by battery "gas gauge" ICs
; Acts as a slave device, responding to commands from a master

; Must run at 1/8 MHz, 1 clock cycle = 8 us
; Auto-push should happen at 9 bits
; 
; IN FIFO format: 0000 0000 1000 0000 0000 0000 0000 0000
;                 |         |
;             byte read    valid bit
; if valid bit is not set, discard byte and treat as BREAK

.program hdq_slave
; side set is just for debugging
.side_set 1
.wrap_target

read_byte:
    set pindirs, 0 side 1
    set x, 7 side 1

    set y, 1 side 1
    in y, 1 side 1 ; shift valid bit in

read_bit:
    wait 0 pin 0 [7] side 1
    in pins, 1 [10] side 0
    jmp pin notbreak side 0
    ; break condition
    push side 0 ; push the incomplete byte so the valid bit is NOT set
    wait 1 pin 0 side 0
    jmp read_byte side 0
notbreak:
    jmp x-- read_bit side 1

.wrap

% c-sdk {
//; this is a raw helper function for use by the user which sets up the GPIO output, and configures the SM to output on a particular pin

#include "hardware/clocks.h"

void hdq_slave_program_init(PIO pio, uint sm, uint offset, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_config c = hdq_slave_program_get_default_config(offset);

    sm_config_set_set_pins(&c, pin, 1);
    sm_config_set_in_pins (&c, pin);
    sm_config_set_jmp_pin (&c, pin);

    float div = clock_get_hz (clk_sys) * (1e-6 * 8); // 1/8 MHz
    sm_config_set_clkdiv (&c, div);

    sm_config_set_in_shift (&c, true, true, 9);

    // Output Shift Register configuration settings
    sm_config_set_out_shift (
        &c,
        true,           // shift direction: right
        false,           // autopull: enabled
        9   // autopull threshold
    );

    //; Sideset pin for debugging
    pio_sm_set_consecutive_pindirs(pio, sm, 13, 1, true);
    sm_config_set_sideset_pins (&c, 13);

    pio_sm_init(pio, sm, offset, &c);
}
%}